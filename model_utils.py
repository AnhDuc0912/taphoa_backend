import os
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image
import numpy as np
from tqdm import tqdm
import pickle
import mysql.connector
from fine_tune import fine_tune_model_with_new_data

# ----- C·∫•u h√¨nh -----
IMAGE_DATA = './static'
MODEL_PATH = './best_model_updated.pt'
FEATURES_CACHE = './features.pkl'
DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': 'mysql',
    'database': 'taphoa_hango'
}

# ----- Ti·ªÅn x·ª≠ l√Ω ·∫£nh -----
TRANSFORM = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# ----- Load m√¥ h√¨nh -----
model = models.resnet18(pretrained=True)
model.fc = nn.Linear(model.fc.in_features, 11)
model.load_state_dict(torch.load(MODEL_PATH, map_location=DEVICE))
model.to(DEVICE)
model.eval()

# ----- Load class names t·ª´ b·∫£ng categories -----
def load_class_names():
    conn = mysql.connector.connect(**DB_CONFIG)
    cursor = conn.cursor()
    cursor.execute("SELECT label FROM categories ORDER BY id")
    class_names = [row[0] for row in cursor.fetchall()]
    conn.close()
    return class_names

class_names = load_class_names()

# ----- H√†m tr√≠ch xu·∫•t vector ƒë·∫∑c tr∆∞ng v√† d·ª± ƒëo√°n nh√£n -----
def extract_features(image_path):
    image = Image.open(image_path).convert("RGB")
    image = TRANSFORM(image).unsqueeze(0).to(DEVICE)
    with torch.no_grad():
        feature_extractor = nn.Sequential(*list(model.children())[:-1])
        features = feature_extractor(image).flatten()
        output = model(image)
        pred_class = torch.argmax(output, dim=1).item()
    return features.cpu().numpy(), pred_class

# ----- Load ho·∫∑c t·∫°o ƒë·∫∑c tr∆∞ng t·ª´ CSDL -----
def load_or_generate_features():
    if os.path.exists(FEATURES_CACHE):
        try:
            with open(FEATURES_CACHE, 'rb') as f:
                data = pickle.load(f)
                if not isinstance(data, dict) or 'sources' not in data:
                    print("‚ö†Ô∏è File cache kh√¥ng ch·ª©a 'sources', ƒëang x√≥a v√† t·∫°o l·∫°i...")
                    os.remove(FEATURES_CACHE)
                else:
                    print("‚úÖ ƒêang n·∫°p ƒë·∫∑c tr∆∞ng t·ª´ file cache...")
                    return data
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc file cache: {e}, ƒëang x√≥a v√† t·∫°o l·∫°i...")
            os.remove(FEATURES_CACHE)

    print("üì¶ Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng t·ª´ CSDL...")
    conn = mysql.connector.connect(**DB_CONFIG)
    cursor = conn.cursor(dictionary=True)

    query_products = """
        SELECT p.image_path, p.product_id, c.label
        FROM products p
        JOIN categories c ON p.category_id = c.id
        WHERE p.image_path IS NOT NULL AND p.image_path != ''
    """
    cursor.execute(query_products)
    products_rows = cursor.fetchall()

    query_images = """
        SELECT pi.image_path, pi.product_id, c.label
        FROM product_images pi
        JOIN products p ON pi.product_id = p.product_id
        JOIN categories c ON p.category_id = c.id
    """
    cursor.execute(query_images)
    images_rows = cursor.fetchall()

    conn.close()

    features_list = []
    paths_list = []
    labels_list = []
    sources_list = []

    for row in tqdm(products_rows, desc="ƒêang x·ª≠ l√Ω h√¨nh ·∫£nh t·ª´ products", unit=" ·∫£nh"):
        print(row['label'])
        img_path = os.path.join(IMAGE_DATA, row['label'], row['image_path'])
        if not os.path.exists(img_path):
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file: {img_path}")
            continue
        try:
            feat, _ = extract_features(img_path)
            features_list.append(feat)
            paths_list.append(row['image_path'])
            labels_list.append(row['label'])
            sources_list.append('products')
        except Exception as e:
            print(f"L·ªói v·ªõi {img_path}: {e}")

    for row in tqdm(images_rows, desc="ƒêang x·ª≠ l√Ω h√¨nh ·∫£nh t·ª´ product_images", unit=" ·∫£nh"):
        print(row['label'])
        img_path = os.path.join(IMAGE_DATA, row['label'], row['image_path'])
        if not os.path.exists(img_path):
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file: {img_path}")
            continue
        try:
            feat, _ = extract_features(img_path)
            features_list.append(feat)
            paths_list.append(row['image_path'])
            labels_list.append(row['label'])
            sources_list.append('product_images')
        except Exception as e:
            print(f"L·ªói v·ªõi {img_path}: {e}")

    cache_data = {
        'features': np.array(features_list),
        'paths': paths_list,
        'labels': labels_list,
        'sources': sources_list
    }
    with open(FEATURES_CACHE, 'wb') as f:
        pickle.dump(cache_data, f)
    print("üíæ ƒê√£ l∆∞u ƒë·∫∑c tr∆∞ng v√†o file.")
    return cache_data

import os

